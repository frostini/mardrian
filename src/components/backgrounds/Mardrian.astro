---
import "../../styles/theme.css";
import "../../styles/animations/colorChange.css";
const { containerHeight } = Astro.props;
---
<div class="container">
  <div class="grid">
    <div class="grid-row top">
      <div class="item"></div>
      <div class="item"></div>
      <div class="item"></div>
    </div>
    <div class="grid-row middle">
      <div class="item"></div>
      <div class="item"></div>
      <div class="item"></div>
    </div>
    <div class="grid-row bottom">
      <div class="item"></div>
      <div class="item"></div>
      <div class="item"></div>
    </div>
  </div>
  <div class="content">
    <slot />
  </div>
</div>

<style define:vars={{ containerHeight }}>
  .container {
    display: grid;
    height: var( --containerHeight);
  }
  .grid {
    margin: 0;
    z-index: 0;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr 6fr 1fr;
    grid-column: 1; 
    grid-row: 1;
  }
  .grid-row {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: var(--border-width);
  }
  .top {
    grid-row: 1;
    animation: gridRowResize 8s ease -4000ms infinite both;
  }
  .middle {
    grid-row: 2;
  }
  .bottom {
    grid-row: 3;
    animation: gridRowResize 8s ease infinite both;
  }
  .item {
    background-color: var(--white-color, white);
  }
  .top .item:nth-child(3) {
    animation: colorChangeBackground 8s ease -2s infinite both;
  }
  .bottom .item:nth-child(1) {
    animation: colorChangeBackground 8s ease 0s infinite both;
  }
  /* content container styling */
  .content {
    z-index: 1;
    display: grid;
    grid-column: 1; 
    grid-row: 1;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr;
    min-height: 0;
  }
  @keyframes gridRowResize {
    0% {
      grid-template-columns: 1fr 1fr 1fr;
    }
    15% {
      grid-template-columns: 1fr 1fr 1fr;
    }
    25% {
      grid-template-columns: 1fr 2fr 4fr;
    }
    40% {
      grid-template-columns: 1fr 2fr 4fr;
    }
    50% {
      grid-template-columns: 1fr 4fr 1fr;
    }
    65% {
      grid-template-columns: 1fr 4fr 1fr;
    }
    75% {
      grid-template-columns: 4fr 2fr 1fr;
    }
    90% {
      grid-template-columns: 4fr 2fr 1fr;
    }
    100% {
      grid-template-columns: 1fr 1fr 1fr;
    }
  }
/* to switch colorchange positions to match header vertical position swap */
  @media screen and (min-width: 600px) {
    /* .grid {
      gap: var(--border-width);
    } */
    .grid-row {
      gap: var(--border-width);
    }
    .top .item:nth-child(1) {
      animation: colorChangeBackground 8s ease -2s infinite both;
    }
    .top .item:nth-child(3) {
      animation: none;
    }
    .bottom .item:nth-child(3) {
      animation: colorChangeBackground 8s ease 0s infinite both;
    }
    .bottom .item:nth-child(1) {
      animation: none;
    }
  }
</style>